@code_warntype starts(gr)
@code_lowered starts(gr)
starts(gr)
genostarts(gr)
@time coverage(gr)
@time gaps(gr)
@time gaps(gr);
@time disjoin(gr);
@time collapse(gr);
collapse(gr)
length()
length(collapse(gr))
issorted(gr)
@time issorted(gr)
@time sort(gr)
@time sort(gr)
@time sort(gr);
timings
timings
timings
@code_warntype(coverage(gr))
@code_warntype(gaps(gr))
using Profile
Profile.clear()
@profile(coverage(gr))
Profile.print()
@time coverage(gr)
Profile.clear()
@profile starts(gr)
Profile.print()
Profile.clear()
@profile for i in 1:100 starts(gr) end
Profile.print()
timings
timings
@code_warntype disjoin(gr)
Profile.clear())
Profile.clear()
@profile for i in 1:100 disjoin(gr) end
Profile.print()
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
Profile.clear(); @profile for i in 1:10 starts(gr) end; Profile.print()
Profile.clear(); @profile for i in 1:100 starts(gr) end; Profile.print()
Profile.clear(); @profile for i in 1:1000 starts(gr) end; Profile.print()
length(reader)

function GenomicRanges(genome_name, reader::BioAlignments.BAM.Reader)
    info = GenomeInfo(genome_name, reader)
    chr = String[]
    left_pos = Int64[]
    right_pos = Int64[]
    record = BAM.Record()
    while !eof(reader)
        read!(reader, record)
        push!(chr, BAM.refname(record))
        push!(left_pos, leftposition(record))
        push!(right_pos, rightposition(record))
    end
    GenomicRanges(chr, left_pos, right_pos, info)
end

reader.start_offset
reader.index
reader.header
length(gr)
Profile.clear())
Profile.clear()
@profile gr = GenomicRanges("hg19", reader); Profile.print()
@profile gr = GenomicRanges("hg19", reader); Profile.print()


Profile.clear()
genome_name = "hg19"
Profile.clear()
@profile GenomicRanges(chr, left_pos, right_pos, info); Profile.print()
@code_warntype GenomicRanges(chr, left_pos, right_pos, info)
@code_warntype genopos(left_pos, chr, info)
Profile.clear()
@profile genopos(left_pos, chr, info); Profile.print()
x = genopos(left_pos, chr, info); 
Profile.clear(); @profile chrpos(x, info); Profile.print()
@time chrpos(x, info)
@time chrpos(x, info);
@time genopos(left_pos, chr, info);
@time chromosomes(x, info);
import GenomicVectors.genopos

function genopos(positions, chromosomes, chrinfo::GenomeInfo)
    if length(positions) != length(chromosomes)
        throw(ArgumentError("Arguments positions and chromosomes must have the same length."))
    end
    offsets = chr_offsets(chrinfo)
    lengths = chr_lengths(chrinfo)
    gpos = similar(offsets, length(positions))
    prev_chr = chromosomes[1]
    len = lengths[prev_chr]
    o = offsets[prev_chr]
    i = 0
    @inbounds for (x,chr) in zip(positions, chromosomes)
        i = i + 1
        if chr != prev_chr
            prev_chr = chr
            len = lengths[prev_chr]
            o = offsets[prev_chr]
        end
        if 1 <= x <= len
            gpos[i] = x + o
        else
            error("Position $x is outside the bounds of chromosome $chr (length $(lengths[prev_chr])).")
        end
    end
    gpos
end

@time genopos(left_pos, chr, info);
@time genopos(left_pos, chr, info);

function genopos(positions, chromosomes, chrinfo::GenomeInfo)
    if length(positions) != length(chromosomes)
        throw(ArgumentError("Arguments positions and chromosomes must have the same length."))
    end
    offsets = chr_offsets(chrinfo)
    lengths = chr_lengths(chrinfo)
    gpos = similar(offsets, length(positions))
    prev_chr = chromosomes[1]
    len = lengths[prev_chr]
    o = offsets[prev_chr]
    @inbounds for i in 1:length(positions)
        chr = chromosomes[i]
        pos = positions[i]
        if chr != prev_chr
            prev_chr = chr
            len = lengths[prev_chr]
            o = offsets[prev_chr]
        end
        if 1 <= x <= len
            gpos[i] = x + o
        else
            error("Position $x is outside the bounds of chromosome $chr (length $(lengths[prev_chr])).")
        end
    end
    gpos
end

@time genopos(left_pos, chr, info);
@time genopos(left_pos, chr, info)

function genopos(positions, chromosomes, chrinfo::GenomeInfo)
    if length(positions) != length(chromosomes)
        throw(ArgumentError("Arguments positions and chromosomes must have the same length."))
    end
    offsets = chr_offsets(chrinfo)
    lengths = chr_lengths(chrinfo)
    gpos = similar(offsets, length(positions))
    prev_chr = chromosomes[1]
    len = lengths[prev_chr]
    o = offsets[prev_chr]
    @inbounds for i in 1:length(positions)
        chr = chromosomes[i]
        x = positions[i]
        if chr != prev_chr
            prev_chr = chr
            len = lengths[prev_chr]
            o = offsets[prev_chr]
        end
        if 1 <= x <= len
            gpos[i] = x + o
        else
            error("Position $x is outside the bounds of chromosome $chr (length $(lengths[prev_chr])).")
        end
    end
    gpos
end

@time genopos(left_pos, chr, info)
@time genopos(left_pos, chr, info)
@time genopos(left_pos, chr, info);
@time chrpos(x, info);
Profile.clear())
Profile.clear()
@profile genopos(left_pos, chr, info); Profile.print()
exit()
issorted
methods(issorted)
timings
timings
bdf = timings
Pkg.add("CSV")
?write
?CSV.write
?CSV.write
?CSV.write
Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
convert(DataFrame, gr)
Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
import Base.convert
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [c_res,s_res,e_res], [:Chromosome, :Start, :End] ) )
end

Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res], [:Start, :End] ) )
end

Profile.clear; convert(DataFrame, gr); Profile.print(); @profile convert(DataFrame, gr); Profile.print()
Profile.print()
Profile.clear()
Profile.clear; convert(DataFrame, gr); @profile convert(DataFrame, gr); Profile.print()
 convert(DataFrame, gr); Profile.print()
@
p
@time convert(DataFrame, gr);

## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res, strands(x)], [:Start, :End, :Strand] ) )
end

@time convert(DataFrame, gr);
@time convert(DataFrame, gr);
strands(gr)

## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res, _strands(x)], [:Start, :End, :Strand] ) )
end

@time convert(DataFrame, gr[1:4,]);
@time convert(DataFrame, gr);

## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) )
end


## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end


#function Base.setindex!(x::GenomicRanges, value::GenomicRanges, i::AbstractArray)
#
#end
## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end

#end
## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res, Strand = _strands(x) ) )
end

convert(DataFrame, gr[1:4])
@time convert(DataFrame, gr);
#end
## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    return( DataFrame( Chromosome = c_res, Start = s_res, End = e_res, Strand = _strands(x) ) )
end

convert(DataFrame, gr[1:4])
@time convert(DataFrame, gr);
@time convert(DataFrame, gr);
Profile.clear()
@profile convert(DataFrame, gr);
Profile.print()

## Conversions
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    DataFrame( Chromosome = c_res, Start = s_res, End = e_res, Strand = _strands(x) )
end

convert(DataFrame, gr[1:4])
function Base.convert(::Type{DataFrame}, x::GenomicPositions)
    chrs = chr_names(x)
    n = length(x)
    c_res = similar(chrs, n)
    p_res = similar(_genostarts(x), n)
    ends = chr_ends(x)
    offsets = chr_offsets(x)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for g in _genostarts(x)
        if g > e || g <= o
            r = 1
            while g > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        p_res[i] = g - o
        i = i + 1
    end
    DataFrame( Chromosome = c_res, Position = p_res )
end

convert(DataFrame, gpos)
exit()
