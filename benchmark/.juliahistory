    offsets = chr_offsets(chrinfo)
    lengths = chr_lengths(chrinfo)
    gpos = similar(offsets, length(positions))
    prev_chr = chromosomes[1]
    len = lengths[prev_chr]
    o = offsets[prev_chr]
    @inbounds for i in 1:length(positions)
        chr = chromosomes[i]
        pos = positions[i]
        if chr != prev_chr
            prev_chr = chr
            len = lengths[prev_chr]
            o = offsets[prev_chr]
        end
        if 1 <= x <= len
            gpos[i] = x + o
        else
            error("Position $x is outside the bounds of chromosome $chr (length $(lengths[prev_chr])).")
        end
    end
    gpos
end

@time genopos(left_pos, chr, info);
@time genopos(left_pos, chr, info)

function genopos(positions, chromosomes, chrinfo::GenomeInfo)
    if length(positions) != length(chromosomes)
        throw(ArgumentError("Arguments positions and chromosomes must have the same length."))
    end
    offsets = chr_offsets(chrinfo)
    lengths = chr_lengths(chrinfo)
    gpos = similar(offsets, length(positions))
    prev_chr = chromosomes[1]
    len = lengths[prev_chr]
    o = offsets[prev_chr]
    @inbounds for i in 1:length(positions)
        chr = chromosomes[i]
        x = positions[i]
        if chr != prev_chr
            prev_chr = chr
            len = lengths[prev_chr]
            o = offsets[prev_chr]
        end
        if 1 <= x <= len
            gpos[i] = x + o
        else
            error("Position $x is outside the bounds of chromosome $chr (length $(lengths[prev_chr])).")
        end
    end
    gpos
end

@time genopos(left_pos, chr, info)
@time genopos(left_pos, chr, info)
@time genopos(left_pos, chr, info);
@time chrpos(x, info);
Profile.clear())
Profile.clear()
@profile genopos(left_pos, chr, info); Profile.print()
exit()
issorted
methods(issorted)
timings
timings
bdf = timings
Pkg.add("CSV")
?write
?CSV.write
?CSV.write
?CSV.write
Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
convert(DataFrame, gr)
Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
import Base.convert
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [c_res,s_res,e_res], [:Chromosome, :Start, :End] ) )
end

Profile.clear()
@profile convert(DataFrame, gr); Profile.print()
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res], [:Start, :End] ) )
end

Profile.clear; convert(DataFrame, gr); Profile.print(); @profile convert(DataFrame, gr); Profile.print()
Profile.print()
Profile.clear()
Profile.clear; convert(DataFrame, gr); @profile convert(DataFrame, gr); Profile.print()
 convert(DataFrame, gr); Profile.print()
@
p
@time convert(DataFrame, gr);

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res, strands(x)], [:Start, :End, :Strand] ) )
end

@time convert(DataFrame, gr);
@time convert(DataFrame, gr);
strands(gr)

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( [s_res,e_res, _strands(x)], [:Start, :End, :Strand] ) )
end

@time convert(DataFrame, gr[1:4,]);
@time convert(DataFrame, gr);

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) )
end


function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end


function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res Strand = _strands(x) ) )
end

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    #return( DataFrame( [c_res,s_res,e_res,strands(x)], [:Chromosome, :Start, :End, :Strand] ) )
    return( DataFrame( Start = s_res, End = e_res, Strand = _strands(x) ) )
end

convert(DataFrame, gr[1:4])
@time convert(DataFrame, gr);
function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    return( DataFrame( Chromosome = c_res, Start = s_res, End = e_res, Strand = _strands(x) ) )
end

convert(DataFrame, gr[1:4])
@time convert(DataFrame, gr);
@time convert(DataFrame, gr);
Profile.clear()
@profile convert(DataFrame, gr);
Profile.print()

function Base.convert(::Type{DataFrame}, x::GenomicRanges)
    n = length(x)
    chrs = chr_names(x)
    c_res = similar(chrs, n)
    s_res = similar(x.starts, n)
    e_res = similar(x.ends, n)
    ends = chr_ends(x.chrinfo)
    offsets = chr_offsets(x.chrinfo)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for (spos,epos) in eachrange(x)
        if spos > e || spos <= o
            r = 1
            while spos > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        s_res[i] = spos - o
        e_res[i] = epos - o
        i = i + 1
    end
    DataFrame( Chromosome = c_res, Start = s_res, End = e_res, Strand = _strands(x) )
end

convert(DataFrame, gr[1:4])
function Base.convert(::Type{DataFrame}, x::GenomicPositions)
    chrs = chr_names(x)
    n = length(x)
    c_res = similar(chrs, n)
    p_res = similar(_genostarts(x), n)
    ends = chr_ends(x)
    offsets = chr_offsets(x)
    i = r = 1
    e = ends[r]
    o = offsets[r]
    c = chrs[r]
    @inbounds for g in _genostarts(x)
        if g > e || g <= o
            r = 1
            while g > ends[r]
                r = r + 1
            end
            e = ends[r]
            o = offsets[r]
            c = chrs[r]
        end
        c_res[i] = c
        p_res[i] = g - o
        i = i + 1
    end
    DataFrame( Chromosome = c_res, Position = p_res )
end

convert(DataFrame, gpos)
exit()
bdf
bdf[:,10:end]
Profile.clear(); @profile disjoin(gr); Profile.print()
Profile.clear(); @profile for i in 1:10 disjoin(gr); end ; end; Profile.print()
Profile.clear(); @profile for i in 1:10 disjoin(gr); done ; end; Profile.print()
bdf[:,10:end]
Profile.clear(); @profile for i in 1:10 collaps(gr); done ; end; Profile.print()
Profile.clear(); @profile for i in 1:10 collapse(gr) end ; end; Profile.print()
Profile.clear(); @profile for i in 1:10 collapse(gr) end ; Profile.print()
?partition!
?Base.partition!
Profile.clear(); @profile for i in 1:10 sort(gr) end ; Profile.print()
@time for i in 1:10 sort(gr) end
@time for i in 1:10 issorted(gr) end
0.009956 /  0.000011
@time for i in 1:10 issorted(gr);foo = copy(gr); end
bdf[:,10:end]
import GenomicVector.collapse
import GenomicVectors.collapse
bdf[:,10:end]
@time for i in 1:10 collapse(gr) end
@timeit collapse(gr)
@timeit collapse(gr)
exit()
