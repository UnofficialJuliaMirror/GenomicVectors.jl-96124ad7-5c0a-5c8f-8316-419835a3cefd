x = gr
coverage(xit)
foo = coverage(xit)
convert(GenomeRanges, foo)
convert("GenomeRanges", foo)
convert(foo,GenomicRanges)
convert(GenomeRanges{Int64}, foo)
convert(GenomicRanges{Int64}, foo)
convert(GenomicRanges, foo)
metadata(foo[1])
foo[1]
foo = coverage(xit)
foo[1]
metadata(first(foo))
ranges(gr)
bounds(gr)
first(each_range(gr))
first(each(gr))
first(eachrange(gr))
reduce(gr)
function reduce(gr::GenomicRanges)
    x = sort(gr)
    current_end = 0
    for s,e in eachrange(gr)
        println(s)
    end
end

?reduce
range_reduce(gr)
out = similar(gr,0)
gr
out = similar(gr)
?similar
@which similar(gr)
?similar
similar(gr,2)
?similar
similar(1:10,2)
similar(1:10,4)
Base.similar(x::GenomicRanges, n::Int) = GenomicRanges(similar(_genostarts(x),n), similar(_genoends(x),n), similar(_strands(x),n), chr_info(x))
similar(gr,2)
exit()
using GenomicVectors
similar(gr,2)
Base.similar(x::GenomicRanges{T<:Integer}, n::Integer) = GenomicRanges(similar(_genostarts(x),n), similar(_genoends(x),n), similar(_strands(x),n), chr_info(x))
Base.similar(x::GenomicRanges{<:Integer}, n::Integer) = GenomicRanges(similar(_genostarts(x),n), similar(_genoends(x),n), similar(_strands(x),n), chr_info(x))
similar(gr,2)
Base.similar(x::GenomicRanges{<:Integer}, n::Integer) = GenomicRanges(similar(genostarts(x),n), similar(genoends(x),n), similar(strands(x),n), chr_info(x))
similar(gr,2)
exit()
similar(gpos)
similar(gpos,3)
g
gr
length(gr)
?resize
?trim
?resize!
simiar(gr)
similar(gr)
typeof(gr.strands)
x = gr.strands[1]
similar(x)
x
exit()
using GenomicVectors
for op in [:similar, :copy, :unique, :resize!]
    @eval (Base.$op)(x::GenomicPositions) = GenomicPositions(($op)(_genostarts(x)), chr_info(x))
    @eval (Base.$op)(x::GenomicRanges) = GenomicRanges(($op)(_genostarts(x)), ($op)(_genoends(x)), ($op)(_strands(x)), chr_info(x))
end
Base.similar(x::GenomicPositions{<:Integer}, n::Integer) = GenomicPositions(similar(_genostarts(x),n), chr_info(x))
Base.similar(x::GenomicRanges{<:Integer}, n::Integer) = GenomicRanges(similar(_genostarts(x),n), similar(_genoends(x),n), similar(_strands(x),n), chr_info(x)

using GenomicVectors
exit()
using GenomicVectors
using GenomicVectors
exit()
using GenomicVectors
using GenomicVectors
gr
exit()
using GenomicVectors
resize!(gr,2)
x
y[1:2,:]
y[1:2]
gr
disjoin(gr)
disjoin(gr)
exit()
exit()
using GenomicVectors
using GenomicVectors
gr
disjoin(gr)
gr
s,e = first(eachrange(gr))
i
disjoin(gr)
disjoin(gr)
disjoin(gr)
disjoin(gr)
disjoin(gr)
disjoin(gr)
disjoin(gr)
gr
disjoin(gr)
gr
disjoin(gr)
gr
_genoends(gr)
gr
_genoends(gr)
_genostarts(gr)
disjoin(gr)
disjoin(gr)
gr.strands = STRAND_NA
gr.strands[:] = STRAND_NA
gr
_genoends(gr)[3] =  40000
gr
gr
out
genostarts(out)
gr
eachrange(gr)
collect(eachrange(gr))
genostarts(gr)
genoends(gr)
genoends(gr)
genostarts(gr)
genostarts(gr)
chrinfo
chrinfo(gr)
genome(gr)
gr.chrinfo
genostarts(gr)
gr.chrinfo
gr
gr.chrinfo
_genostarts(gr)
exit()
gr
genostarts(gr)
chrinfo(gr)
gr
gr.chrinfo
gr.starts
genopos(s,chrinfo)
genopos(s,chrs, chrinfo)
positions = s
chromsomes = chrs
chrinfo
chr_offsets(chrinfo)
out
genostarts(out)
chrinfo
@code_warntype disjoin(gr)
@code_warntype disjoin(gr)
@code_warntype disjoin(gr)
?disjoin
?disjoin
gaps
?gaps
gaps(gr)
gaps(gr)
gr
gaps(gr)
gr
gaps(gr)
gr
gaps(gr)
gr
length(chr_info(x))
chr_info(x)
chr_ends(x)
last(chr_ends(x))
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
methods(GenomicRanges)
ones(typof(genopos(gr)),2)
ones(typeof(genopos(gr)),2)
ones(genopos(gr),2)
?ones
coverage(gr)
coverage(gr)
using RLEVectors
coverage(gr)
coverage(gr)
gr
coverage(gr)
x = coverage(gr)
ranges(x)
collect(eachrange(x))
gr
chr_info(gr)
chr_ends(gr)
eachrange(x)
eachrange(gr)
collect(eachrange(gr))
out
x
gr
gr
runvalues(out)
values(out)
ends(out)
@test ends(out) == [99,150,199,219,250,300,3499,2600,23000]
[99,150,199,219,250,300,3499,2600,23000]
ends(out)
ends(out)

[99, 150, 199, 219, 250, 300, 3499, 3600, 23000] == [99, 150, 199, 219, 250, 300, 3499, 2600, 23000]
exit()
using RLEVectors
exit()
using GenomicVectors
exit()
